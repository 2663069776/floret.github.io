<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java变量</title>
      <link href="/posts/84ef.html"/>
      <url>/posts/84ef.html</url>
      
        <content type="html"><![CDATA[<h3 id="介绍：Java变量一共有3种，分别是：成员变量、静态变量、局部变量，接下来我们往下看。"><a href="#介绍：Java变量一共有3种，分别是：成员变量、静态变量、局部变量，接下来我们往下看。" class="headerlink" title="介绍：Java变量一共有3种，分别是：成员变量、静态变量、局部变量，接下来我们往下看。"></a><p align="center">介绍：Java变量一共有3种，分别是：成员变量、静态变量、局部变量，接下来我们往下看。</p></h3><h3 id="1-成员变量"><a href="#1-成员变量" class="headerlink" title="1.成员变量"></a><p align="center" style="font-size: 20px">1.成员变量</p></h3><pre class=" language-code"><code class="language-code">package com.hmg.Test;/** * 成员变量：从属于对象，会自动被初始化。生命周期：对象创建，成员变量也跟着创建，对象消失，成员变量也跟着消失。 * @author 凉城 * 代码如下： */public class TestVariable {    String name;        //定义一个字符串的成员变量，名字为name    String sex;                int age;                //定义一个整型的成员变量，名字为age    public static void main(String[] args) {    }}</code></pre><h3 id="2-静态变量"><a href="#2-静态变量" class="headerlink" title="2.静态变量"></a><p align="center" style="font-size: 20px">2.静态变量</p></h3><pre class=" language-code"><code class="language-code">package com.hmg.Test;/** * 静态变量：从属于类。生命周期：类被加载，静态变量就有效，类被卸载，静态变量也会消失。 * @author 凉城 * 代码如下： */public class TestVariable {    static String name;        //定义一个字符串的静态变量，名字为name    static String sex;                static int age;                //定义一个整型的静态变量，名字为age    public static void main(String[] args) {    }}</code></pre><h3 id="3-局部变量"><a href="#3-局部变量" class="headerlink" title="3.局部变量"></a><p align="center" style="font-size: 20px">3.局部变量</p></h3><pre class=" language-code"><code class="language-code">package com.hmg.Test;/** * 局部变量：从属于方法或语句块，先赋值再使用，因为不会自动初始化。生命周期：从声明位置开始，直到方法或语句块执行完毕，局部变量就会消失。 * @author 凉城 * 代码如下： */public class TestVariable {    public static void main(String[] args) {        String name;        //定义一个字符串的局部变量，名字name        String sex;        int age;                //定义一个整型的局部变量，名字age    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SE </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java标识符规范</title>
      <link href="/posts/1de6.html"/>
      <url>/posts/1de6.html</url>
      
        <content type="html"><![CDATA[<p align="center" style=" font-size:20px "><strong>标识符规范</strong></p><p>1.标识符必须以字母、下划线“_” 、美元符“$”开头。</p><p>2.标识符其他部分可以是字母、下划线“_” 、美元符“$”和数字任意组合。</p><p>3.Java标识符大小写敏感，且长度无限制。</p><p>4.标识符不可以是Java的关键字。</p><p>【注意】：Java不采用通常语言使用的ASCII字符集，而是采用Unicode这样标准的国际字符集。<br>因此，这里字母的含义不仅仅是英文、还包括汉字等等。不建议使用汉字来定义标识符。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SE </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github+云服务器搭建博客</title>
      <link href="/posts/ac76.html"/>
      <url>/posts/ac76.html</url>
      
        <content type="html"><![CDATA[<p>使用Github的原因是因为双重部署，这样稳一些，好了，废话不多说，看教程！</p><p>搭建环境：CentOS 7.7+Nginx 1.18.0+Node.js 12.4.0+Github</p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>因为Centos7.7的yum仓库里面Git版本比较旧所以我们采用源码安装新版Git</p><h4 id="1-1安装编译源码依赖包"><a href="#1-1安装编译源码依赖包" class="headerlink" title="1.1安装编译源码依赖包"></a>1.1安装编译源码依赖包</h4><pre class=" language-code"><code class="language-code">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></pre><pre class=" language-code"><code class="language-code">yum install -y gcc perl-ExtUtils-MakeMaker</code></pre><h4 id="1-2卸载老版本Git"><a href="#1-2卸载老版本Git" class="headerlink" title="1.2卸载老版本Git"></a>1.2卸载老版本Git</h4><pre class=" language-code"><code class="language-code">yum remove -y git</code></pre><h4 id="1-3下载新版Git"><a href="#1-3下载新版Git" class="headerlink" title="1.3下载新版Git"></a>1.3下载新版Git</h4><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/</a><br>这是Git下载目录自行找最新版</p><pre class=" language-code"><code class="language-code">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz  </code></pre><pre class=" language-code"><code class="language-code">xz -d git-2.9.5.tar.xz          //将xz解压然后得到tar格式压缩文件 tar xvf git-2.9.5.tar         //解压tar文件</code></pre><h4 id="1-4编译安装Git"><a href="#1-4编译安装Git" class="headerlink" title="1.4编译安装Git"></a>1.4编译安装Git</h4><pre class=" language-code"><code class="language-code">cd git-2.9.5      //进入文件夹make prefix=/usr/local/git all     //编译至该目录下make prefix=/usr/local/git install   //安装到该目录</code></pre><p>注意：先编译在安装，编译速度取决于机器性能，等待一下就好了</p><p>编译好后配置环境变量</p><pre class=" language-code"><code class="language-code">vim /etc/profile</code></pre><p>在文件最下面写入变量</p><pre class=" language-code"><code class="language-code">export PATH=$PATH:/usr/local/git/bin    //这个目录是刚刚编译安装Git的目录</code></pre><p>配置好变量后刷新一下</p><pre class=" language-code"><code class="language-code">source /etc/profile</code></pre><p>最后用git –version查看版本，可以看到Git的版本号为2.9.5表示已经安装成功了</p><h3 id="2-配置Git用户"><a href="#2-配置Git用户" class="headerlink" title="2.配置Git用户"></a>2.配置Git用户</h3><pre class=" language-code"><code class="language-code">adduser git     //创建用户passwd git      //设置用户密码chmod 740 /etc/sudoers  //赋予这个文件权限vim /etc/sudoers        //编辑这个文件</code></pre><p>在配置中找到这条记录</p><pre class=" language-code"><code class="language-code">## Allow root to run any commands anywhereroot    ALL=(ALL)       ALL#在这条记录的下面添加一个Git配置git    ALL=(ALL)       ALL</code></pre><p>然后把权限改回来<font color="red">chmod 400 /etc/sudoers</font></p><h3 id="3-安装及配置Nginx"><a href="#3-安装及配置Nginx" class="headerlink" title="3.安装及配置Nginx"></a>3.安装及配置Nginx</h3><p>因为我的Yum仓库里有Nginx的包所以就直接Yum安装了，如果你的没有就自行百度Nginx的安装</p><h4 id="3-1安装Nginx"><a href="#3-1安装Nginx" class="headerlink" title="3.1安装Nginx"></a>3.1安装Nginx</h4><pre class=" language-code"><code class="language-code">yum install -y nginx    //安装Nginxsystemctl start nginx  //启动Nginxsystemctl enable nginx //开机启动Nginx</code></pre><h4 id="3-2配置Nginx"><a href="#3-2配置Nginx" class="headerlink" title="3.2配置Nginx"></a>3.2配置Nginx</h4><p>针对不同版本不同方式安装的Nginx配置文件位置可能不一样，我们可以用<font color="red">nginx -t</font>查看配置文件位置，也可以用检查语法错误,我的配置文件在<font color="red">/etc/nginx/nginx.conf</font>下</p><p><font color="red">vim /etc/nginx/nginx.conf</font>命令进行编辑</p><pre class=" language-code"><code class="language-code">server{     listen       80 default_server;     listen       [::]:80 default_server;     server_name  www.xxx.com;       #修改成你的域名     root         /MyBlog/public/;        #修改成网站目录下的public文件夹      # Load configuration files for the default server block.      include /etc/nginx/default.d/*.conf;      location / {        }      error_page 404 /404.html;            location = /40x.html {        }      error_page 500 502 503 504 /50x.html;            location = /50x.html {        }}</code></pre><p>然后<font color="red">systemctl restart nginx</font>重启服务</p><h3 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4.安装Node.js"></a>4.安装Node.js</h3><h4 id="4-1下载Node-js"><a href="#4-1下载Node-js" class="headerlink" title="4.1下载Node.js"></a>4.1下载Node.js</h4><p><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a><br>这是Node.js下载目录自行寻找最新版本</p><pre class=" language-code"><code class="language-code">wget https://nodejs.org/dist/v12.4.0/node-v12.4.0-linux-x64.tar.xz</code></pre><h4 id="4-2解压Node-js压缩包"><a href="#4-2解压Node-js压缩包" class="headerlink" title="4.2解压Node.js压缩包"></a>4.2解压Node.js压缩包</h4><pre class=" language-code"><code class="language-code">xz -d node-v12.4.0-linux-x64.tar.xztar -xvf node-v12.4.0-linux-x64.tar</code></pre><p>移动到<font color="red">/usr/local/node</font>目录下</p><pre class=" language-code"><code class="language-code">mv node-v12.4.0-linux-x64 /usr/local/node</code></pre><h4 id="4-3配置环境变量"><a href="#4-3配置环境变量" class="headerlink" title="4.3配置环境变量"></a>4.3配置环境变量</h4><pre class=" language-code"><code class="language-code">#编辑这个文件vim /etc/profile#添加内容，指定Node目录export PATH=$PATH:/usr/local/node/bin#刷新一下环境source /etc/profile</code></pre><p>输入<font color="red">node -v</font>测试Node.js是否安装成功，输出版本即完成安装</p><h3 id="5-安装Hexo框架"><a href="#5-安装Hexo框架" class="headerlink" title="5.安装Hexo框架"></a>5.安装Hexo框架</h3><h4 id="5-1创建博客目录"><a href="#5-1创建博客目录" class="headerlink" title="5.1创建博客目录"></a>5.1创建博客目录</h4><p>这里作者在根目录安装，如要在其他目录安装，请自行修改nginx配置路径，不然访问不上</p><pre class=" language-code"><code class="language-code">#创建目录mkdir /MyBlog#进入目录cd /MyBlog</code></pre><h4 id="5-2安装Hexo"><a href="#5-2安装Hexo" class="headerlink" title="5.2安装Hexo"></a>5.2安装Hexo</h4><pre class=" language-code"><code class="language-code">npm install -g hexo-cil</code></pre><h4 id="5-3初始化Hexo"><a href="#5-3初始化Hexo" class="headerlink" title="5.3初始化Hexo"></a>5.3初始化Hexo</h4><pre class=" language-code"><code class="language-code">#要在MyBlog下执行哦~hexo init</code></pre><h4 id="5-4修改配置"><a href="#5-4修改配置" class="headerlink" title="5.4修改配置"></a>5.4修改配置</h4><p><font color="red">vim _config.yml</font></p><pre class=" language-code"><code class="language-code"># Hexo Configuration  ## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点信息设置title:凉城      #站点名字subtitle:  #副标题description: #站描述author:凉城 #作者language: zh-CN #语言timezone:# URL 链接设置## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://www.xxx.com #设置成你的域名 root: / permalink: :year/:month/:day/:title/ permalink_defaults: </code></pre><h3 id="6-部署到GitHub上"><a href="#6-部署到GitHub上" class="headerlink" title="6.部署到GitHub上"></a>6.部署到GitHub上</h3><p>github的注册在这里我就不多说了</p><p>在创建github仓库之前先干一件事情，就是把github的私有邮箱关掉，不然会报错哦，请看图<br><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505173815.png" alt=""><br><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505174240.png" alt=""></p><h4 id="6-1创建Github仓库"><a href="#6-1创建Github仓库" class="headerlink" title="6.1创建Github仓库"></a>6.1创建Github仓库</h4><p align="center">看图</p><p><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505172508.png" alt=""></p><p><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505173337.png" alt=""></p><h4 id="6-2设置本机的Git全局配置"><a href="#6-2设置本机的Git全局配置" class="headerlink" title="6.2设置本机的Git全局配置"></a>6.2设置本机的Git全局配置</h4><pre class=" language-code"><code class="language-code">git config --global user.email example@qq.com //这里的eamil改成自己GitHub上的邮件地址 git config --global user.name luckyfloret //这里的name改成你Github的用户名</code></pre><h4 id="6-3生成ssh密码"><a href="#6-3生成ssh密码" class="headerlink" title="6.3生成ssh密码"></a>6.3生成ssh密码</h4><p>生成ssh密钥的作用是将本地文件部署到Github</p><pre class=" language-code"><code class="language-code">cd   //进到根目录ssh-keygen -t rsa -C example@qq.com    //不带-C和自己用户名邮箱Github不认可less .ssh/id_rsa.pub     /查看密钥</code></pre><h4 id="6-4在Github上导入ssh密钥"><a href="#6-4在Github上导入ssh密钥" class="headerlink" title="6.4在Github上导入ssh密钥"></a>6.4在Github上导入ssh密钥</h4><p>执行<font color="red">less .ssh/id_rsa.pub</font>将里面的内容全部复制<br><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505173815.png" alt=""></p><p><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200505180103.png" alt=""></p><h4 id="6-5配置Hexo与GitHub仓库同步"><a href="#6-5配置Hexo与GitHub仓库同步" class="headerlink" title="6.5配置Hexo与GitHub仓库同步"></a>6.5配置Hexo与GitHub仓库同步</h4><pre class=" language-code"><code class="language-code">deploy:  type: git     #类型  repo: git@github.com:luckyfloret/luckyfloret.github.io.git       #git仓库地址,里面的luckyfloret是github的仓库地址  branch: master             message: '站点更新:{{now("YYYY-MM-DD HH/mm/ss")}}'     </code></pre><h3 id="7-修改主题"><a href="#7-修改主题" class="headerlink" title="7.修改主题"></a>7.修改主题</h3><h4 id="7-1主题下载"><a href="#7-1主题下载" class="headerlink" title="7.1主题下载"></a>7.1主题下载</h4><p><a href="https://hexo.io/themes/这是其他博主分享的主题，找一个自己喜欢的下载" target="_blank" rel="noopener">https://hexo.io/themes/这是其他博主分享的主题，找一个自己喜欢的下载</a></p><h4 id="7-2使用主题"><a href="#7-2使用主题" class="headerlink" title="7.2使用主题"></a>7.2使用主题</h4><p>通过工具上传主题到博客根目录下的一个叫<font color="red">themes</font>的文件夹内，然后解压主题</p><pre class=" language-code"><code class="language-code">#解压完后编辑博客根目录下的_config.ymlvim _config.yml</code></pre><p align="center">找到theme值,然后修改成自己的主题名称即可</p><p><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200504021550.png" alt=""></p><h3 id="8-部署与访问测试"><a href="#8-部署与访问测试" class="headerlink" title="8.部署与访问测试"></a>8.部署与访问测试</h3><pre class=" language-code"><code class="language-code">#在博客根目录下执行哦#编译Hexohexo generate#将本地仓库更新至Github仓库hexo d</code></pre><p>执行 hexo d 后报错：<font color="red">ERROR Deployer not found: git</font></p><p>这是没安装插件的原因，安装一下插件就好了</p><pre class=" language-code"><code class="language-code">npm install --save hexo-deployer-git</code></pre><p>然后再执行 hexo d 就发现部署成功了</p><p>测试访问：<a href="https://luckyfloret.github.io" target="_blank" rel="noopener">https://luckyfloret.github.io</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+云服务器搭建博客</title>
      <link href="/posts/9f65.html"/>
      <url>/posts/9f65.html</url>
      
        <content type="html"><![CDATA[<p>作者的搭建环境：CentOS 7.7+Nginx 1.18+Node.js 12.4.0+Hexo</p><h3 id="1-安装编译源码依赖包"><a href="#1-安装编译源码依赖包" class="headerlink" title="1.安装编译源码依赖包"></a>1.安装编译源码依赖包</h3><pre class=" language-code"><code class="language-code">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></pre><pre class=" language-code"><code class="language-code">yum install -y gcc perl-ExtUtils-MakeMaker</code></pre><h3 id="2-安装及配置Nginx"><a href="#2-安装及配置Nginx" class="headerlink" title="2.安装及配置Nginx"></a>2.安装及配置Nginx</h3><p>因为我的Yum仓库里有Nginx的包所以就直接Yum安装了，如果你的没有就自行百度Nginx的安装</p><h4 id="2-1安装Nginx"><a href="#2-1安装Nginx" class="headerlink" title="2.1安装Nginx"></a>2.1安装Nginx</h4><pre class=" language-code"><code class="language-code">yum install -y nginx    //安装Nginxsystemctl start nginx  //启动Nginxsystemctl enable nginx //开机启动Nginx</code></pre><h4 id="2-2配置Nginx"><a href="#2-2配置Nginx" class="headerlink" title="2.2配置Nginx"></a>2.2配置Nginx</h4><p>针对不同版本不同方式安装的Nginx配置文件位置可能不一样，我们可以用<font color="red">nginx -t</font>查看配置文件位置，也可以用检查语法错误,我的配置文件在<font color="red">/etc/nginx/nginx.conf</font>下</p><p><font color="red">vim /etc/nginx/nginx.conf</font>命令进行编辑</p><pre class=" language-code"><code class="language-code">server{     listen       80 default_server;     listen       [::]:80 default_server;     server_name  www.xxx.com;       #修改成你的域名     root         /MyBlog/public/;        #修改成网站目录下的public文件夹      # Load configuration files for the default server block.      include /etc/nginx/default.d/*.conf;      location / {        }      error_page 404 /404.html;            location = /40x.html {        }      error_page 500 502 503 504 /50x.html;            location = /50x.html {        }}</code></pre><p>然后<font color="red">systemctl restart nginx</font>重启服务</p><h3 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h3><h4 id="3-1下载Node-js"><a href="#3-1下载Node-js" class="headerlink" title="3.1下载Node.js"></a>3.1下载Node.js</h4><p><a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a><br>这是Node.js下载目录自行寻找最新版本</p><pre class=" language-code"><code class="language-code">wget https://nodejs.org/dist/v12.4.0/node-v12.4.0-linux-x64.tar.xz</code></pre><h4 id="3-2解压Node-js压缩包"><a href="#3-2解压Node-js压缩包" class="headerlink" title="3.2解压Node.js压缩包"></a>3.2解压Node.js压缩包</h4><pre class=" language-code"><code class="language-code">xz -d node-v12.4.0-linux-x64.tar.xztar -xvf node-v12.4.0-linux-x64.tar</code></pre><p>移动到<font color="red">/usr/local/node</font>目录下</p><pre class=" language-code"><code class="language-code">mv node-v12.4.0-linux-x64 /usr/local/node</code></pre><h4 id="3-3配置环境变量"><a href="#3-3配置环境变量" class="headerlink" title="3.3配置环境变量"></a>3.3配置环境变量</h4><pre class=" language-code"><code class="language-code">#编辑这个文件vim /etc/profile#添加内容，指定Node目录export PATH=$PATH:/usr/local/node/bin#刷新一下环境source /etc/profile</code></pre><p>输入<font color="red">node -v</font>测试Node.js是否安装成功，输出版本即完成安装</p><h3 id="4-安装Hexo框架"><a href="#4-安装Hexo框架" class="headerlink" title="4.安装Hexo框架"></a>4.安装Hexo框架</h3><h4 id="4-1创建博客目录"><a href="#4-1创建博客目录" class="headerlink" title="4.1创建博客目录"></a>4.1创建博客目录</h4><p>这里作者在根目录安装，如要在其他目录安装，请自行修改nginx配置路径，不然访问不上</p><pre class=" language-code"><code class="language-code">#创建目录mkdir /MyBlog#进入目录cd /MyBlog</code></pre><h4 id="4-2安装Hexo"><a href="#4-2安装Hexo" class="headerlink" title="4.2安装Hexo"></a>4.2安装Hexo</h4><pre class=" language-code"><code class="language-code">npm install -g hexo-cil</code></pre><h4 id="4-3初始化Hexo"><a href="#4-3初始化Hexo" class="headerlink" title="4.3初始化Hexo"></a>4.3初始化Hexo</h4><pre class=" language-code"><code class="language-code">#要在MyBlog下执行哦~hexo init</code></pre><h4 id="4-4修改配置"><a href="#4-4修改配置" class="headerlink" title="4.4修改配置"></a>4.4修改配置</h4><p><font color="red">vim _config.yml</font></p><pre class=" language-code"><code class="language-code"># Hexo Configuration  ## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点信息设置title:凉城      #站点名字subtitle:  #副标题description: #站描述author:凉城 #作者language: zh-CN #语言timezone:# URL 链接设置## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://www.xxx.com #设置成你的域名 root: / permalink: :year/:month/:day/:title/ permalink_defaults: --------------------------------------------------------------下面省略，跳到最下面deploy:  type:      #类型  repo:      #git仓库地址，我留空，因为咱们不用git部署  branch: master             message: '站点更新:{{now("YYYY-MM-DD HH/mm/ss")}}'     </code></pre><h3 id="5-修改主题"><a href="#5-修改主题" class="headerlink" title="5.修改主题"></a>5.修改主题</h3><h4 id="5-1主题下载"><a href="#5-1主题下载" class="headerlink" title="5.1主题下载"></a>5.1主题下载</h4><p><a href="https://hexo.io/themes/这是其他博主分享的主题，找一个自己喜欢的下载" target="_blank" rel="noopener">https://hexo.io/themes/这是其他博主分享的主题，找一个自己喜欢的下载</a></p><h4 id="5-2使用主题"><a href="#5-2使用主题" class="headerlink" title="5.2使用主题"></a>5.2使用主题</h4><p>通过工具上传主题到博客根目录下的一个叫<font color="red">themes</font>的文件夹内，然后解压主题</p><pre class=" language-code"><code class="language-code">#解压完后编辑博客根目录下的_config.ymlvim _config.yml</code></pre><p align="center">找到theme值,然后修改成自己的主题名称即可</p><p><img src="https://gitee.com//luckyfloret/blogimage/raw/master/img/20200504021550.png" alt=""></p><h3 id="6-部署与访问测试"><a href="#6-部署与访问测试" class="headerlink" title="6.部署与访问测试"></a>6.部署与访问测试</h3><pre class=" language-code"><code class="language-code">#编译Hexohexo generate</code></pre><p>然后再去访问一下你的网站就发现部署成功了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/posts/e479.html"/>
      <url>/posts/e479.html</url>
      
        <content type="html"><![CDATA[<h1 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a><center>作者介绍</center></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家好，我是作者凉城，为什么搭建这个博客呢？因为我有一个朋友之前搭建了，然后我觉得挺好玩的，所以就搭建了一个，这个博客是用Hexo+云服务器搭建的，之后作者也会写一个搭建教程，还有就是作者也会把一些关于学习的奉献上来。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 关于作者 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于作者 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
